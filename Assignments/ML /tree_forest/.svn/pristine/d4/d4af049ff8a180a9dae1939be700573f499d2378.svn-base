{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project Structure\n",
    "\n",
    "The hands on project on Predict Employee Churn with Decision Trees and Random Forests is divided into the following tasks:\n",
    "\n",
    "## Task 1: Introduction and Import Libraries\n",
    "\n",
    "- Introduction to the data set and the problem overview.\n",
    "- See a demo of the final product you will build by the end of this project.\n",
    "- Import essential modules and helper functions from NumPy, Matplotlib, and scikit-learn.\n",
    "\n",
    "## Task 2: Exploratory Data Analysis\n",
    "\n",
    "- Load the employee dataset using pandas\n",
    "- Explore the data visually by graphing various features against the target with Matplotlib.\n",
    "\n",
    "## Task 3: Encode Categorical Features\n",
    "\n",
    "- The dataset contains two categorical variables: Department and Salary.\n",
    "- Create dummy encoded variables for both categorical variables.\n",
    "\n",
    "## Task 4: Visualize Class Imbalance\n",
    "\n",
    "- Use Yellowbrick's Class Balance visualizer to create a frequency plot of both classes.\n",
    "- The presence or absence of a class balance problem will inform your sampling strategory while creating training and validation sets.\n",
    "\n",
    "## Task 5: Create Training and Validation Sets\n",
    "\n",
    "- Split the data into a 80/20 training/validation split.\n",
    "- Use a stratified sampling strategy\n",
    "\n",
    "## Tasks 6 & 7: Build a Decision Tree Classifier with Interactive Controls\n",
    "\n",
    "- Use the interact function to automatically create UI controls for function arguments.\n",
    "- Build and train a decision tree classifier with scikit-learn.\n",
    "- Calculate the training and validation accuracies.\n",
    "- Display the fitted decision tree graphically.\n",
    "\n",
    "## Task 8: Build a Random Forest Classifier with Interactive Controls\n",
    "\n",
    "- Use the interact function again to automatically create UI controls for function arguments.\n",
    "- To overcome the variance problem associated with decision trees, build and train a random forests classifier with scikit-learn.\n",
    "- Calculate the training and validation accuracies.\n",
    "- Display a fitted tree graphically.\n",
    "\n",
    "## Task 9: Feature Importance Plots and Evaluation Metrics\n",
    "\n",
    "- Many model forms describe the underlying impact of features relative to each other.\n",
    "- Decision Tree models and Random Forest in scikit-learn, feature_importances_ attribute when fitted.\n",
    "- Utilize this attribute to rank and plot the features.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
